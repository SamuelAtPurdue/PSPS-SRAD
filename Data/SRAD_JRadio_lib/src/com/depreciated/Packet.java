package com.depreciated;

/**
 * Created by Samuel Hild on 9/29/2018.
 * project: SRAD_JRadio_lib
 * package: com.psps
 * filename: Packet.java
 * interface: Packet()
 *
 * description: This interface is used for handling all types of packets send and received over radio.
 * It includes basic functionality required regardless of the data type being sent or the packet type.
 * This interface is designed to provide a blueprint and standard for all packets sent and should be easily allow for new packet types and data to be implemented in the future.
 * The radio will be designed to accept any Packet() and send it regardless of the subtype.
 * All data will be converted to binary before being sent over radio but will be handled as hex digits until sent.
 *
 * static methods:
 * TODO: implement more static methods
 * static hexPacktoBin(Packet)
 *  hexPacktoBin simply to takes a hex formatted packet and converts it dirrectly to binary for sending over radio.
 *
 *
 * abstract methods:
 * Below is a brief description of the methods contained in this interface and suggestions for implementation.
 * All suggestions are by no means binding but should be done to maintain consistency across subclasses.
 * All below methods are abstract and consequentially must be implemented by the subclass.
 * Further documentation of the specific intended function of each method is found at each method signature.
 *
 * verifyChecksum(Data)
 *  A checksum is used to verify integrity of data sent over wireless communication by determining if all data is sent correctly and completely.
 *  This is done mathematically and can be achieved in a few different ways.
 *  verifyChecksum() is used for verifying a received Packet() checksum which is generated by generateChecksum() or an equivalent function.
 *  verifyChecksum() accepts one argument (assuming no overloads) in the form of the Data() received over the radio.
 *  The end of this Data() object is the checksum that is verified and is compared to the preceding data.
 *  The delimiter chosen to separate the Checksum from the rest of the data in the Data() object is left to the implementation of the specific subclass of Data() and the implementation of the specific subclass of Packet().
 *  However this delimiter MUST be communicated clearly and consistently in order to avoid ambiguity which could return confusing or invalid results.
 *  verifyChecksum() returns a boolean value for whether or not the checksum was verified successfully(true means successful verification and false means failed verification).
 *  Implementation of specific checksum method is left up to the implementing subclass as well as error handling.
 *
 * generateChecksum(Data)
 *  A checksum is used to verify integrity of data sent over wireless communication by determining if all data is sent correctly and completely.
 *  This is done mathematically and can be achieved in a few different ways.
 *  generateChecksum() used for generating a new checksum before the Packet() is sent.
 *  This checksum will be appended to the end of the sent Packet() and will be verified by the verifyChecksum() method or a similar equivalent function when received by the receiving system.
 *  generateChecksum() accepts one argument in the form of a Data() object which will have a checksum generated for it.
 *  The end of this Data() object the checksum will be appended to the data.
 *  The delimiter chosen to separate the Checksum from the rest of the data in the Data() object is left to the implementation of the specific subclass of Data() and the implementation of the specific subclass of Packet().
 *  However this delimiter MUST be communicated clearly and consistently in order to avoid ambiguity which could return confusing or invalid results.
 *  generateChecksum() returns the checksum as a char array which contains the checksum as hex digits this is then appended to the end of the packet however the implementing subclass sees fit.
 *  Implementation is left up to the subclass to choose the specific checksum calculation to use.
 *
 * assemblePacket(Data)
 *  assemblePacket() is used as the final assembly of the packet before being sent over the radio.
 *  assemblePacket() takes one Data() object as the argument which is the information to be placed in the Packet() to be sent.
 *  All formatting for the Packet() should be completed before this method is called as this is only for placing it into a it's final form before being sent.
 *  The one exception to this rule is the Data can be formatted as hex instead of binary will be converted automatically a separate hexPacktoBin() method.
 *  This method will return a new Packet() of whatever type the subclass decides to return as.
 *  All other details of implementation are left up to the subclass.
 *
 * TODO: declare more abstract methods
 */
public interface Packet {

}
